<div class="text-center">
    <h1 class="display-4">Directors</h1>
</div>

<div id="app" >
    <div v-if="isAuthorized" class="row">
        <div class="col-md-12">
            <div class="alert alert-info" v-if="feedback">
                {{feedback}}
            </div>
        </div>
        <div class="col-md-12">
            <button class="btn btn-secondary btn-block w-25" v-on:click.prevent="toEditMode(false)">New</button>
        </div>

        <div class="col-md-6">
            <ul class="list-group">
                <li class="list-group-item list-group-item-action" v-for="director in directors" v-on:click="getDirectorDetails(director)">
                    {{director.name}}
                </li>
            </ul>
        </div>

        <div class="col-md-6">
            <div v-if="currentDirector">
                <div class="form-group">
                    <label>Name</label>
                    <input class="form-control" v-model="currentDirector.name" v-bind:readonly="isReadOnly" />
                </div>
                <div class="btn-group">
                    <button class="btn btn-warning" v-if="isReadOnly" v-on:click.prevent="toEditMode(true)">Edit</button>
                    <button class="btn btn-warning" v-if="!isReadOnly" v-on:click.prevent="saveDirector">Save</button>
                    <button class="btn btn-primary" v-if="!isReadOnly" v-on:click.prevent="isReadOnly = true">Cancel</button>
                    <button class="btn btn-danger" v-on:click.prevent="deleteDirector">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div v-else>
        <div class="col-md-offset-1">
            <div class="alert alert-danger text-xl-center">
                <h4 class="alert-heading">You are not authorized to see this page!</h4>
                <p>Please contact an admin for more info</p>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/axios/axios.min.js"></script>

    <script>
        const apiURL = apiBase + directorEndpoint;
        var token = sessionStorage.getItem('jwtToken');
        const axiosConfig = { headers: { Authorization: `Bearer ${token}` } };

        var app = new Vue({
            el: "#app",
            data: {
                directors: null,
                currentDirector: null,
                isReadOnly: true,
                isEditMode: false,
                feedback: '',
                isAuthorized: true
            },
            created:
                function () {
                    var self = this;
                    console.log(apiBase);
                    self.fetchDirectors();
                },
            methods: {
                fetchDirectors: function () {
                    var self = this;
                    axios
                        .get(apiURL, axiosConfig)
                        .then(function (response) {
                            console.log(token);
                            self.directors = response.data;
                            self.isAuthorized = true;
                        })
                        .catch(function (error) {
                            if (error.response.status === 403 || error.response.status === 401) {
                                self.isAuthorized = false;
                                console.log(error);
                            }
                        });
                },
                getDirectorDetails: function (director) {
                    var self = this;
                    self.currentDirector = director;
                },

                toEditMode: function (isEditMode) {
                    var self = this;
                    self.isReadOnly = false;
                    self.isEditMode = isEditMode;

                    if (!self.isEditMode) {
                        self.currentDirector = {
                            name: ""
                        }
                    }
                },

                saveDirector: function () {
                    var self = this;

                    if (self.isEditMode) {

                        var url = `${apiURL}`;
                        axios.put(url, self.currentDirector, axiosConfig)
                            .then(function (response) {
                                self.feedback = `Director ${self.currentDirector.name} has been modified`;
                            })
                            .catch(function (error) {
                                if (error.response.status === 403 || error.response.status === 401) {
                                    self.feedback = `You are not authorized to modify a director`;
                                    console.log(error);
                                }
                            })
                            .then(function () {
                                self.isReadOnly = true;
                                setTimeout(function () { self.feedback = null; }, 3000);
                            });
                    }
                    else {
                        var url = `${apiURL}`;
                        axios.post(url, self.currentDirector, axiosConfig)
                            .then(function (response) {
                                self.currentDirector = response.data;
                                self.feedback = `Director ${self.currentDirector.name} has been created`;
                                self.directors.push(self.currentDirector); // update directors
                            })
                            .catch(function (error) {
                                if (error.response.status === 403 || error.response.status === 401) {
                                    self.feedback = `You are not authorized to create a director`;
                                    console.log(error);
                                }
                                console.error(error);
                            })
                            .then(function () {
                                self.isReadOnly = true;
                                setTimeout(function () { self.feedback = null; }, 3000);
                            });
                    }
                },
                deleteDirector: function () {
                    var self = this;
                    var url = `${apiURL}/${self.currentDirector.id}`;

                    axios.delete(url, axiosConfig)
                        .then(function (response) {
                            self.directors.forEach(function (director, i) {
                                if (director.id === self.currentDirector.id) {
                                    self.directors.splice(i, 1); // update directors
                                    self.currentDirector = {
                                        name: ""
                                    }
                                    self.feedback = `Director ${self.currentDirector.name} has been deleted`;
                                    setTimeout(function () { self.feedback = null; }, 3000);
                                }
                            })
                        })
                        .catch(function (error) {
                            if (error.response.status === 403 || error.response.status === 401) {
                                self.feedback = `You are not authorized to delete a director`;
                                console.log(error);
                            }
                            console.error(error);
                        })
                },
            }
        });
    </script>
}