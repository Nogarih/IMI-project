// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Todd Phillips"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Eric Kripke"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Christopher Nolan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Vince Gilligan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Chris Buck"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "F.Gary Gray"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "James Manos Jr."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "David Milch"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Robert Kirkman"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Ridley Scott"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "John Carpenter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Bong Joon Ho"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "James Mangold"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Name = "Makoto Shinkai"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Crime"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Western"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Historical"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Superhero"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "Biographical"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Name = "Shonen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Name = "Shoujo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Name = "Seinen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Name = "Josei"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            Name = "Ecchi"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Name = "Harem"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Name = "Isekai"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            Name = "Mecha"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            Name = "Magic"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            Name = "Yaoi"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            Name = "Yuri"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            Name = "Family"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            Name = "Animation"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Korean"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Dutch"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "French"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Norwegian"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "German"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Italian"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Spanish"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1996, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc58",
                            Email = "admin@pri.be",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@PRI.BE",
                            NormalizedUserName = "PRIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELBh5+VF+fX5NxPQUcOEHOA0RXmMaV9J+6ScZtMUX5AHR0Q8k0aTDoDVS7afVnTI8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TwoFactorEnabled = false,
                            UserName = "PriAdmin"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1990, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc59",
                            Email = "user@pri.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@PRI.BE",
                            NormalizedUserName = "PRIUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEOhyqNMWsu9P4jr529qlYCSIoKQpSCY9LAtL5VJ/FP4P2PmtL2RJvHdHI8nVVCOmww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINB",
                            TwoFactorEnabled = false,
                            UserName = "PriUser"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1986, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc60",
                            Email = "refuser@pri.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@PRI.BE",
                            NormalizedUserName = "PRIREFUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEM4MRjJbBuCWKiWyPR7F4UGNrqbBcxNrqcKUPg+HB05Ma+ZGlL5ONI+XwIQaMFHl7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINC",
                            TwoFactorEnabled = false,
                            UserName = "PriRefuser"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1996, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc60",
                            Email = "ellen@email.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLEN@EMAIL.COM",
                            NormalizedUserName = "EMEULENI",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJ+7bbwFNnzJUxqu4t/Pi1zAv3g9jXPgfE9l6qKWI1An+17cwzifQzeudDZm2vYEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINC",
                            TwoFactorEnabled = false,
                            UserName = "emeuleni"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1995, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc60",
                            Email = "jordanh@email.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JORDANH@EMAIL.COM",
                            NormalizedUserName = "JORDANH",
                            PasswordHash = "AQAAAAEAACcQAAAAEBXuuHqXposvHJzYKY/QfS9J2niFHQ7zTfeZ2sThipP+rhph7bgs6emvbzZWwEfWSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINC",
                            TwoFactorEnabled = false,
                            UserName = "jordanh"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UserWatchItem", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WatchItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "WatchItemId");

                    b.HasIndex("UserId1");

                    b.HasIndex("WatchItemId");

                    b.ToTable("UserWatchItems");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WatchItemId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WatchItemId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WatchItemId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WatchItemId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WatchItemId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WatchItemId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WatchItemId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WatchItemId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WatchItemId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            WatchItemId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.WatchItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("LanguageId");

                    b.ToTable("WatchItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WatchItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyStamp = "2152188c-7484-43a2-b630-4672cdf38ad3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyStamp = "72fe3f15-670b-423c-94c2-924dd4bd0630",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Admin",
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "User",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "hasApprovedTermsAndConditions",
                            ClaimValue = "True",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "User",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "hasApprovedTermsAndConditions",
                            ClaimValue = "False",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "User",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "hasApprovedTermsAndConditions",
                            ClaimValue = "True",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "User",
                            UserId = "00000000-0000-0000-0000-000000000005"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "hasApprovedTermsAndConditions",
                            ClaimValue = "False",
                            UserId = "00000000-0000-0000-0000-000000000005"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000004",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000005",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Anime", b =>
                {
                    b.HasBaseType("Imi.Project.Api.Core.Entities.WatchItem");

                    b.Property<bool>("HasSub")
                        .HasColumnType("bit");

                    b.Property<int>("Seasons")
                        .HasColumnType("int");

                    b.Property<int>("TotalEpisodes")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Anime");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "A superhero-loving boy without any powers is determined to enroll in a prestigious hero academy and learn what it really means to be a hero.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Image = "https://static.posters.cz/image/750/posters/my-hero-academia-cobalt-blast-group-i63331.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 2016,
                            Title = "My Hero Academia",
                            HasSub = true,
                            Seasons = 5,
                            TotalEpisodes = 117
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "A boy swallows a cursed talisman - the finger of a demon - and becomes cursed himself. He enters a shaman's school to be able to locate the demon's other body parts and thus exorcise himself.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Image = "https://www.themoviedb.org/t/p/original/mJVUZpPR4BdZzLWyP51h8pOU1RO.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 2020,
                            Title = "Jujutsu Kaisen",
                            HasSub = true,
                            Seasons = 1,
                            TotalEpisodes = 24
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "High school student Ichigo Kurosaki, who has the ability to see ghosts, gains soul reaper powers from Rukia Kuchiki and sets out to save the world from Hollows.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Image = "https://pics.filmaffinity.com/Bleach_TV_Series-214857327-large.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 2004,
                            Title = "Bleach",
                            HasSub = false,
                            Seasons = 16,
                            TotalEpisodes = 369
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "An intelligent high school student goes on a secret crusade to eliminate criminals from the world after discovering a notebook capable of killing anyone whose name is written into it.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Image = "https://m.media-amazon.com/images/I/716ASj7z2GL._AC_SL1000_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 2019,
                            Title = "Death Note",
                            HasSub = true,
                            Seasons = 1,
                            TotalEpisodes = 37
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "After learning that he is from another planet, a warrior named Goku and his friends are prompted to defend it from an onslaught of extraterrestrial enemies.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Image = "https://m.media-amazon.com/images/M/MV5BMGMyOThiMGUtYmFmZi00YWM0LWJiM2QtZGMwM2Q2ODE4MzhhXkEyXkFqcGdeQXVyMjc2Nzg5OTQ@._V1_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 1996,
                            Title = "Dragon Ball Z",
                            HasSub = false,
                            Seasons = 16,
                            TotalEpisodes = 227
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "Naruto Uzumaki, is a loud, hyperactive, adolescent ninja who constantly searches for approval and recognition, as well as to become Hokage, who is acknowledged as the leader and strongest of all ninja in the village.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Image = "https://www.ecranlarge.com/uploads/image/001/151/affiche-1151327.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 2007,
                            Title = "Naruto",
                            HasSub = true,
                            Seasons = 21,
                            TotalEpisodes = 502
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Description = "Ayuzawa Misaki serves as the student council president at Seika High. However, unbeknownst to her classmates, she works part-time as an employee at a Maid Cafe. Usui Takumi, a boy from her school, discovers this secret.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000017"),
                            Image = "https://www.themoviedb.org/t/p/original/igkn0M1bgMeATz59LShvVxZNdVd.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 2010,
                            Title = "Kaichou wa Maid-sama!",
                            HasSub = true,
                            Seasons = 1,
                            TotalEpisodes = 28
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Description = "After his hometown is destroyed and his mother is killed, young Eren Jaeger vows to cleanse the earth of the giant humanoid Titans that have brought humanity to the brink of extinction.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Image = "https://cdn.europosters.eu/image/750/posters/attack-on-titan-shingeki-no-kyojin-key-art-i22808.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 2013,
                            Title = "Shingeki no Kyojin",
                            HasSub = true,
                            Seasons = 4,
                            TotalEpisodes = 86
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "In an era where aliens have invaded and taken over feudal Tokyo, an unemployed samurai finds work however he can.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Image = "https://www.themoviedb.org/t/p/w500/5AX6ObPYZN0RP3L0Eu7s0RCLxeX.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 2005,
                            Title = "Gintama",
                            HasSub = true,
                            Seasons = 8,
                            TotalEpisodes = 375
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Description = "After Tohru is taken in by the Soma family, she learns that twelve family members transform involuntarily into animals of the Chinese zodiac and helps them deal with the emotional pain caused by the transformations.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000017"),
                            Image = "https://image.animedigitalnetwork.fr/license/fruitsbasket/tv/web/affiche_370x0.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 2019,
                            Title = "Fruits Basket",
                            HasSub = true,
                            Seasons = 5,
                            TotalEpisodes = 63
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Movie", b =>
                {
                    b.HasBaseType("Imi.Project.Api.Core.Entities.WatchItem");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DirectorId");

                    b.HasDiscriminator().HasValue("Movie");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Description = "In Gotham City, mentally troubled comedian Arthur Fleck is disregarded and mistreated by society. He then embarks on a downward spiral of revolution and bloody crime. This path brings him face-to-face with his alter-ego: the Joker.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Image = "https://cdn11.bigcommerce.com/s-ydriczk/images/stencil/608x608/products/89058/93685/Joker-2019-Final-Style-steps-Poster-buy-original-movie-posters-at-starstills__62518.1572351179.jpg?c=2",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2019,
                            Title = "Joker",
                            DirectorId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Description = "A frustrated man decides to take justice into his own hands after a plea bargain sets one of his family's killers free.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Image = "https://i.pinimg.com/originals/98/53/97/985397db12c9ee1e9a6f1887132d7143.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2009,
                            Title = "Law Abiding Citizen",
                            DirectorId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Description = "In a future where mutants are nearly extinct, an elderly and weary Logan leads a quiet life. But when Laura, a mutant child pursued by scientists, comes to him for help, he must get her to safety.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Image = "https://m.media-amazon.com/images/I/91WgnhSHyzL._AC_SL1500_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2017,
                            Title = "Logan",
                            DirectorId = new Guid("00000000-0000-0000-0000-000000000013")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Description = "After a tragic accident, two stage magicians in 1890s London engage in a battle to create the ultimate illusion while sacrificing everything they have to outwit each other.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Image = "https://i.pinimg.com/originals/b8/ca/36/b8ca36698e80e2e5b8da7ac5311dea68.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2006,
                            Title = "The Prestige",
                            DirectorId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Description = "Two strangers find themselves linked in a bizarre way. When a connection forms, will distance be the only thing to keep them apart?",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Image = "https://cdn.hmv.com/r/w-640/hmv/files/7e/7e218362-fccb-4eea-9d9a-f8df684538ec.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ReleaseYear = 2016,
                            Title = "Your Name",
                            DirectorId = new Guid("00000000-0000-0000-0000-000000000014")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Description = "A man raised by gorillas must decide where he really belongs when he discovers he is a human.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000028"),
                            Image = "https://m.media-amazon.com/images/I/511JYaL4kAL._AC_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 1999,
                            Title = "Tarzan",
                            DirectorId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Description = "A research team in Antarctica is hunted by a shape-shifting alien that assumes the appearance of its victims.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Image = "https://m.media-amazon.com/images/M/MV5BNGViZWZmM2EtNGYzZi00ZDAyLTk3ODMtNzIyZTBjN2Y1NmM1XkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 1982,
                            Title = "The Thing",
                            DirectorId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Description = "A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Image = "https://lh3.googleusercontent.com/proxy/Urw2HIVZ39hfNxch37mGggoOCjTsUlncvcSO1W5fwAcXO3CzMIlRzZHN_By1QEHCuG6ETpP5lF-ZVUOatxTM_hAu6ub9bT0ovDE_oOww7XfWfKak",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2000,
                            Title = "Gladiator",
                            DirectorId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Description = "King Charles VI declares that Knight Jean de Carrouges settle his dispute with his squire by challenging him to a duel.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Image = "https://lh3.googleusercontent.com/proxy/8Jbnz5trqlL0vTp5gazZ_r8zE3PCniCJkolTQgsW7X0Q5mniaV02QKhkrI0Zq7M9VKWLlNHai28fa1PMQVyT2z-yRVi0xmVbbygndelZ1cs",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2021,
                            Title = "The Last Duel",
                            DirectorId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            Description = "Greed and class discrimination threaten the newly formed symbiotic relationship between the wealthy Park family and the destitute Kim clan.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Image = "https://m.media-amazon.com/images/I/91sustfojBL._AC_SL1500_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ReleaseYear = 2019,
                            Title = "Parasite",
                            DirectorId = new Guid("00000000-0000-0000-0000-000000000012")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.TvSerie", b =>
                {
                    b.HasBaseType("Imi.Project.Api.Core.Entities.WatchItem");

                    b.Property<int>("Seasons")
                        .HasColumnName("TvSerie_Seasons")
                        .HasColumnType("int");

                    b.Property<int>("TotalEpisodes")
                        .HasColumnName("TvSerie_TotalEpisodes")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("TvSerie");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Description = "He's smart. He's lovable. He's Dexter Morgan, America's favorite serial killer, who spends his days solving crimes and nights committing them. Golden Globe winner Michael C. Hall stars in the hit SHOWTIME Original Series.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Image = "https://m.media-amazon.com/images/I/71OC--Zwi2L._AC_SL1000_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2006,
                            Title = "Dexter",
                            Seasons = 8,
                            TotalEpisodes = 96
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Description = "A show set in the late 1800s, revolving around the characters of Deadwood, South Dakota; a town of deep corruption and crime.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Image = "https://m.media-amazon.com/images/I/918wMqktUNL._SY500_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2004,
                            Title = "Deadwood",
                            Seasons = 3,
                            TotalEpisodes = 36
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            Description = "A high school chemistry teacher diagnosed with inoperable lung cancer turns to manufacturing and selling methamphetamine in order to secure his family's future.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Image = "https://i.pinimg.com/originals/72/83/92/728392b482329cfef27833fe110321b8.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2008,
                            Title = "Breaking Bad",
                            Seasons = 5,
                            TotalEpisodes = 62
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            Description = "A group of vigilantes set out to take down corrupt superheroes who abuse their superpowers.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Image = "https://m.media-amazon.com/images/M/MV5BNGEyOGJiNWEtMTgwMi00ODU4LTlkMjItZWI4NjFmMzgxZGY2XkEyXkFqcGdeQXVyNjcyNjcyMzQ@._V1_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2019,
                            Title = "The Boys",
                            Seasons = 2,
                            TotalEpisodes = 24
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            Description = "An adult animated series based on the Skybound/Image comic about a teenager whose father is the most powerful superhero on the planet.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000028"),
                            Image = "https://m.media-amazon.com/images/M/MV5BNWYwYjAyMzgtNzQyNC00M2JiLWI2ZTQtNzRmZThmOTk4NmRmXkEyXkFqcGdeQXVyMTkxNjUyNQ@@._V1_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2021,
                            Title = "Invincible",
                            Seasons = 1,
                            TotalEpisodes = 8
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            Description = "A writer tries to juggle his career, his relationship with his daughter and his ex-girlfriend, as well as his appetite for beautiful women.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Image = "https://www.themoviedb.org/t/p/original/jPqOY8cq9KXQN4bD7zJGHCNvcb4.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2007,
                            Title = "Californication",
                            Seasons = 7,
                            TotalEpisodes = 84
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            Description = "Geralt of Rivia, a solitary monster hunter, struggles to find his place in a world where people often prove more wicked than beasts.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Image = "https://m.media-amazon.com/images/I/713TM23V+CL._AC_SL1000_.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2019,
                            Title = "The Witcher",
                            Seasons = 1,
                            TotalEpisodes = 17
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            Description = "Hundreds of cash-strapped players accept a strange invitation to compete in children's games. Inside, a tempting prize awaits with deadly high stakes. A survival game that has a whopping 45.6 billion-won prize at stake.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Image = "https://0.soompi.io/wp-content/uploads/2021/08/23110511/squid-game.jpeg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ReleaseYear = 2021,
                            Title = "Squid Game",
                            Seasons = 1,
                            TotalEpisodes = 9
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            Description = "In a war-torn world of elemental magic, a young boy reawakens to undertake a dangerous mystic quest to fulfill his destiny as the Avatar, and bring peace to the world.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000028"),
                            Image = "https://images-na.ssl-images-amazon.com/images/I/81KjBiKs-AL.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2005,
                            Title = "Avatar: The Last Airbender",
                            Seasons = 3,
                            TotalEpisodes = 62
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            Description = "A gangster family epic set in 1900s England, centering on a gang who sew razor blades in the peaks of their caps, and their fierce boss Tommy Shelby.",
                            GenreId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Image = "https://i.pinimg.com/originals/b7/7c/ec/b77cec7281be7c2fc1dd793362927f76.jpg",
                            LanguageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ReleaseYear = 2014,
                            Title = "Peaky Blinders",
                            Seasons = 5,
                            TotalEpisodes = 36
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UserWatchItem", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("UserWatchItems")
                        .HasForeignKey("UserId1");

                    b.HasOne("Imi.Project.Api.Core.Entities.WatchItem", "WatchItem")
                        .WithMany("UserWatchItems")
                        .HasForeignKey("WatchItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.WatchItem", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Movie", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Director", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
